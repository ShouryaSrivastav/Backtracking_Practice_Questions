public class Backtracking {
//-------------------------Knights Tour-------------------------
    static int n = 8;
    public static boolean isSafe(int x , int y , int sol[][]){
        return x>=0 && x<n && y>=0 && y<n && sol[x][y] == -1;
    }
    public static void printSolution(int sol[][]){
        for(int i = 0; i<n; i++){
            for(int j = 0; j<n; j++){
                System.out.print(" "+sol[i][j]+" ");
                
            }
            System.out.println();
        }
    }
    public static boolean solveKT(){
        int sol[][] = new int[n][n];

        for(int x = 0; x<n; x++){
            for(int y = 0; y<n; y++){
                sol[x][y] = -1;
            }
        }
         
        int xMove[] = {2,1,-1,-2,-2,-1,1,2};
        int yMove[] = {1,2,2,1,-1,-2,-2,-1};

        sol[0][0]=0;

        if(!solveKTutil(0,0 , 1, sol, xMove, yMove)){
            System.out.println("Solution Does Not Exist");
            return false;
        
        }
        else{
            printSolution(sol);


        }
        return true;
    }

    public static boolean solveKTutil(int x , int y, int move, int sol[][] , int xMove[],int yMove[]){
        int k , next_x, next_y;
        if(move == n*n){
            return true;
        }
        for(k=0; k<8; k++){
            next_x = x+xMove[k];
            next_y = y+yMove[k];
            if(isSafe(next_x,next_y,sol)){
                sol[next_x][next_y] = move;
                if(solveKTutil(next_x, next_y, move+1, sol, xMove, yMove)){
                    return true;
                }
                 else{
                    sol[next_x][next_y] = -1;//backtracking
                }

            }
        }
                return false;
        
    }


        
    
    public static void main(String args[]){
      solveKT();
    }
}
